{"title":"How to create an Economist-style chart with plotly","markdown":{"yaml":{"title":"How to create an Economist-style chart with plotly","author":"{{< var author >}}","date":"2024-11-13","date-format":"medium","categories":["visualization"],"image":"image.png"},"headingText":"Update layout to customize appearance","containsRefs":false,"markdown":"\n\nWhen it comes to static visualizations you can use in print, no publication does a better job creating them than *The Economist*. That's because their charts are simple, yet they manage to convey the relevant message contained in the data.\n\nMany people focus on the chart's aesthetics—how it looks to the human eye. In so doing, they neglect the message contained in the data, which they are supposed to convey to the audience.\n\nI have no idea what software the data visualization analysts at *The Economist* use to create their charts. Regardless, I thought I should try recreating one of the plots using my favorite plotting library, Plotly.\n\nHere's the original chart from *The Economist*.\n\n::: {.gray-text .center-text}\n![The Economist chart](image2.png){fig-align=\"center\"}\n:::\n\n```{python}\n#| echo: false\nfrom pathlib import Path\nimport base64\n\nwith open(f\"{Path('../../')}/images/logo.png\", \"rb\") as image_file:\n    encoded_image = base64.b64encode(image_file.read()).decode()\n```\n\nSince I didn't have the data to recreate this chart, I put together some fake department data about a company from one of my favorite TV shows, Suits. Below is the dataframe containing the data.\n```{python}\nimport polars as pl\nimport plotly.graph_objects as go\n\ndata = {\n    \"Department\": [\"Production\", \"Finance\", \"Customer Service\", \"Operations\", \"IT\", \"Procurement\", \"Sales\", \"HR\"],\n    \"2023\": [20, 60, 80, 85, 45, 32, 60, 75],\n    \"2024\": [35, 70, 70, 78, 55, 55, 65, 80]\n}\n\ndf = pl.DataFrame(data).sort('Department', descending=False)\ndf\n```\n<br>\n\nAnd now here is the chart designed using Plotly.\n```{python}\nBG_COLOR = '#E9EDF0'\nRED = '#E3120B'\nGREY = '#5e5c64'\n\nfig = go.Figure()\n\nfor i in range(df.shape[0]):\n    fig.add_trace(go.Scatter(\n        x=[df[\"2023\"][i], df[\"2024\"][i]],\n        y=[df[\"Department\"][i], df[\"Department\"][i]],\n        mode='lines+markers',\n        line=dict(color='#598080', width=4),  # Thicker line\n        marker=dict(size=16),  # Bigger dots\n        showlegend=False\n    ))\n    fig.add_trace(go.Scatter(\n        x=[df[\"2023\"][i]],\n        y=[df[\"Department\"][i]],\n        mode='markers',\n        marker=dict(color=GREY, size=16),  # Bigger dots\n        showlegend=False\n    ))\n    fig.add_trace(go.Scatter(\n        x=[df[\"2024\"][i]],\n        y=[df[\"Department\"][i]],\n        mode='markers',\n        marker=dict(color=RED, size=16),  # Bigger dots\n        showlegend=False\n    ))\n\nfig.update_layout(\n    title=\"<b>Engagement score declined in<br>customer service & operations\",\n    title_font=dict(size=26),\n    title_y=.9,\n    plot_bgcolor=BG_COLOR,\n    paper_bgcolor=BG_COLOR,\n    height=600,\n    margin=dict(t=180, b=80),\n    xaxis=dict(\n        side=\"top\",  # Move x-axis to the top\n        tickfont=dict(size=18, family=\"Inter\")  # Increase the font size of the x-axis ticks\n    ),\n    yaxis=dict(\n        tickfont=dict(size=16, family=\"Inter\")\n    ),\n    shapes=[\n        dict(\n            type=\"line\",\n            xref=\"paper\",\n            yref=\"paper\",\n            x0=-0.14, y0=1.5,  \n            x1=0.022, y1=1.5,  \n            line=dict(\n                color=RED,  \n                width=10  \n            )\n        )],\n    font=dict(family=\"Inter\")  # Set the global font to \"Inter\"\n)\n\nfig.add_annotation(\n    dict(\n        text=\"<b>2023\",\n        x=0.1,  # x position (0 means far left)\n        y=0.72,  # y position (adjust as necessary)\n        xref=\"paper\",\n        yref=\"paper\",\n        showarrow=False,  # No arrow\n        font=dict(\n            family=\"Inter\",  # Font family\n            size=22,  # Font size\n            color=GREY  # Font color\n        ),\n        align=\"left\"\n    ),\n)\n\nfig.add_annotation(\n    dict(\n        text=\"<b>2024\",\n        x=0.6,  # x position (0 means far left)\n        y=0.72,  # y position (adjust as necessary)\n        xref=\"paper\",\n        yref=\"paper\",\n        showarrow=False,  # No arrow\n        font=dict(\n            family=\"Inter\",  # Font family\n            size=22,  # Font size\n            color=RED  # Font color\n        ),\n        align=\"left\"\n    ),\n)\n\nfig.add_layout_image(\n    dict(\n        source=f\"data:image/png;base64,{encoded_image}\",\n        xref=\"paper\",\n        yref=\"paper\",\n        x=.94,\n        y=-0.18,\n        xanchor=\"right\",\n        yanchor=\"bottom\",\n        sizex=0.22,\n        sizey=0.22,\n        layer=\"above\"\n    )\n)\n\nfig.add_annotation(\n    dict(\n        text=\"Source: Pearson Specter Litt\",\n        x=-0.14,  # x position (0 means far left)\n        y=-0.175,  # y position (adjust as necessary)\n        xref=\"paper\",\n        yref=\"paper\",\n        showarrow=False,  # No arrow\n        font=dict(\n            family=\"Inter\",  # Font family\n            size=14,  # Font size\n            color=GREY  # Font color\n        ),\n        align=\"left\"\n    ),\n)\n\nfig.show()\n```\n<br>\n\nForget about the differences in the data used in my chart and that by *The Economist* and pay attention to the style. You'll notice that they have the same style. This just shows how customizable Plotly is as a graphing library. You can customize any chat to your heart's content.\n\n> Now you know that plotly is versatile. You can customize your plots to your heart's contents!","srcMarkdownNoYaml":"\n\nWhen it comes to static visualizations you can use in print, no publication does a better job creating them than *The Economist*. That's because their charts are simple, yet they manage to convey the relevant message contained in the data.\n\nMany people focus on the chart's aesthetics—how it looks to the human eye. In so doing, they neglect the message contained in the data, which they are supposed to convey to the audience.\n\nI have no idea what software the data visualization analysts at *The Economist* use to create their charts. Regardless, I thought I should try recreating one of the plots using my favorite plotting library, Plotly.\n\nHere's the original chart from *The Economist*.\n\n::: {.gray-text .center-text}\n![The Economist chart](image2.png){fig-align=\"center\"}\n:::\n\n```{python}\n#| echo: false\nfrom pathlib import Path\nimport base64\n\nwith open(f\"{Path('../../')}/images/logo.png\", \"rb\") as image_file:\n    encoded_image = base64.b64encode(image_file.read()).decode()\n```\n\nSince I didn't have the data to recreate this chart, I put together some fake department data about a company from one of my favorite TV shows, Suits. Below is the dataframe containing the data.\n```{python}\nimport polars as pl\nimport plotly.graph_objects as go\n\ndata = {\n    \"Department\": [\"Production\", \"Finance\", \"Customer Service\", \"Operations\", \"IT\", \"Procurement\", \"Sales\", \"HR\"],\n    \"2023\": [20, 60, 80, 85, 45, 32, 60, 75],\n    \"2024\": [35, 70, 70, 78, 55, 55, 65, 80]\n}\n\ndf = pl.DataFrame(data).sort('Department', descending=False)\ndf\n```\n<br>\n\nAnd now here is the chart designed using Plotly.\n```{python}\nBG_COLOR = '#E9EDF0'\nRED = '#E3120B'\nGREY = '#5e5c64'\n\nfig = go.Figure()\n\nfor i in range(df.shape[0]):\n    fig.add_trace(go.Scatter(\n        x=[df[\"2023\"][i], df[\"2024\"][i]],\n        y=[df[\"Department\"][i], df[\"Department\"][i]],\n        mode='lines+markers',\n        line=dict(color='#598080', width=4),  # Thicker line\n        marker=dict(size=16),  # Bigger dots\n        showlegend=False\n    ))\n    fig.add_trace(go.Scatter(\n        x=[df[\"2023\"][i]],\n        y=[df[\"Department\"][i]],\n        mode='markers',\n        marker=dict(color=GREY, size=16),  # Bigger dots\n        showlegend=False\n    ))\n    fig.add_trace(go.Scatter(\n        x=[df[\"2024\"][i]],\n        y=[df[\"Department\"][i]],\n        mode='markers',\n        marker=dict(color=RED, size=16),  # Bigger dots\n        showlegend=False\n    ))\n\n# Update layout to customize appearance\nfig.update_layout(\n    title=\"<b>Engagement score declined in<br>customer service & operations\",\n    title_font=dict(size=26),\n    title_y=.9,\n    plot_bgcolor=BG_COLOR,\n    paper_bgcolor=BG_COLOR,\n    height=600,\n    margin=dict(t=180, b=80),\n    xaxis=dict(\n        side=\"top\",  # Move x-axis to the top\n        tickfont=dict(size=18, family=\"Inter\")  # Increase the font size of the x-axis ticks\n    ),\n    yaxis=dict(\n        tickfont=dict(size=16, family=\"Inter\")\n    ),\n    shapes=[\n        dict(\n            type=\"line\",\n            xref=\"paper\",\n            yref=\"paper\",\n            x0=-0.14, y0=1.5,  \n            x1=0.022, y1=1.5,  \n            line=dict(\n                color=RED,  \n                width=10  \n            )\n        )],\n    font=dict(family=\"Inter\")  # Set the global font to \"Inter\"\n)\n\nfig.add_annotation(\n    dict(\n        text=\"<b>2023\",\n        x=0.1,  # x position (0 means far left)\n        y=0.72,  # y position (adjust as necessary)\n        xref=\"paper\",\n        yref=\"paper\",\n        showarrow=False,  # No arrow\n        font=dict(\n            family=\"Inter\",  # Font family\n            size=22,  # Font size\n            color=GREY  # Font color\n        ),\n        align=\"left\"\n    ),\n)\n\nfig.add_annotation(\n    dict(\n        text=\"<b>2024\",\n        x=0.6,  # x position (0 means far left)\n        y=0.72,  # y position (adjust as necessary)\n        xref=\"paper\",\n        yref=\"paper\",\n        showarrow=False,  # No arrow\n        font=dict(\n            family=\"Inter\",  # Font family\n            size=22,  # Font size\n            color=RED  # Font color\n        ),\n        align=\"left\"\n    ),\n)\n\nfig.add_layout_image(\n    dict(\n        source=f\"data:image/png;base64,{encoded_image}\",\n        xref=\"paper\",\n        yref=\"paper\",\n        x=.94,\n        y=-0.18,\n        xanchor=\"right\",\n        yanchor=\"bottom\",\n        sizex=0.22,\n        sizey=0.22,\n        layer=\"above\"\n    )\n)\n\nfig.add_annotation(\n    dict(\n        text=\"Source: Pearson Specter Litt\",\n        x=-0.14,  # x position (0 means far left)\n        y=-0.175,  # y position (adjust as necessary)\n        xref=\"paper\",\n        yref=\"paper\",\n        showarrow=False,  # No arrow\n        font=dict(\n            family=\"Inter\",  # Font family\n            size=14,  # Font size\n            color=GREY  # Font color\n        ),\n        align=\"left\"\n    ),\n)\n\nfig.show()\n```\n<br>\n\nForget about the differences in the data used in my chart and that by *The Economist* and pay attention to the style. You'll notice that they have the same style. This just shows how customizable Plotly is as a graphing library. You can customize any chat to your heart's content.\n\n> Now you know that plotly is versatile. You can customize your plots to your heart's contents!"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","editor":"visual","extra-files":["CNAME"],"_quarto-vars":{"author":"Joram Mutenge","polars_course":"[Polars course](https://www.udemy.com/course/analyzing-data-with-polars-in-python/)","ml_course":"[Machine Learning course](https://www.udemy.com/course/machine-learning-with-polars/)","unlaid_1":"[Unlaid: Book 1](https://www.amazon.com/dp/B0B2WZJM1M/)","unlaid_2":"[Unlaid: Book 2](https://www.amazon.com/dp/B0C642592W/)","wong":"[The Almanack of Brian Wong](https://www.amazon.com/dp/B0B37Z79BM/)","belmar":"[Be A Glitch](https://www.amazon.com/dp/B0D5Y7X5SF/)"},"theme":["cosmo","../../custom.scss"],"title":"How to create an Economist-style chart with plotly","author":"{{< var author >}}","date":"2024-11-13","date-format":"medium","categories":["visualization"],"image":"image.png"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}