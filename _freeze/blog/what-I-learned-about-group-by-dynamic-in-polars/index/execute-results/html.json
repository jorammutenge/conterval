{
  "hash": "82ba0fb7bbf6b9dd64987c0e3168a596",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"What I learned about group by dynamic in polars while working on a client's project\"\nauthor: '{{< var author >}}'\ndate: '2024-12-30'\ndate-format: iso\ntoc: true\ntoc-title: 'Sections'\ntoc-location: right\ntoc-depth: 2\n---\n\nIn the last client project I worked on, I learned something about the `group_by_dynamic` function in Polars. While what I learned was surprising, the fact that I learned it during the project was not. This aligns with the philosophy of \"let the work be the practice\" that Cal Newport advocates, and I’m proud to say I follow it. Most people spend time learning about a particular technology before they use it in a project. Cal Newport’s philosophy suggests combining learning with doing. By practicing through actual work, you gain mastery. By the end of this project, my proficiency in Polars increased dramatically.\n\n## A brief overview of the project\n\nThe client had forecast data for 2025 for electronic gadgets in monthly buckets, but she wanted it converted into weekly buckets. The dates in the data she presented all started at the beginning of each month. For instance, the first row contained the date January 1, 2025. Below is the forecast data from the client.\n\n::: {#5314288d .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (96, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>Date</th><th>Gadget</th><th>Forecast</th></tr><tr><td>date</td><td>str</td><td>i16</td></tr></thead><tbody><tr><td>2025-01-01</td><td>&quot;Headphones&quot;</td><td>3439</td></tr><tr><td>2025-01-01</td><td>&quot;Keyboard&quot;</td><td>1652</td></tr><tr><td>2025-01-01</td><td>&quot;Monitor&quot;</td><td>311</td></tr><tr><td>2025-01-01</td><td>&quot;Mouse&quot;</td><td>1139</td></tr><tr><td>2025-01-01</td><td>&quot;Printer&quot;</td><td>123</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>2025-12-01</td><td>&quot;Mouse&quot;</td><td>1385</td></tr><tr><td>2025-12-01</td><td>&quot;Printer&quot;</td><td>166</td></tr><tr><td>2025-12-01</td><td>&quot;Smartwatch&quot;</td><td>678</td></tr><tr><td>2025-12-01</td><td>&quot;Tablet&quot;</td><td>496</td></tr><tr><td>2025-12-01</td><td>&quot;Webcam&quot;</td><td>512</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n## How we solved the problem\n\nAt first, I thought I could solve the problem by simply dividing each forecast value by 7, the number of days in a week. However, a colleague quickly reminded me that not all months are created equal—some have more days than others. So, I quickly abandoned that approach and searched for an alternative.\n\nThe solution that worked involved creating, from scratch, a single-column dataframe containing all the days of the year 2025, from January to December. We joined this dataframe with the client’s forecast data and then applied `group_by_dynamic`. It worked like a charm, but it also exposed something I hadn’t been fully aware of regarding `group_by_dynamic`.\n\n## Creating the date dataframe.\n\nUsing `datetime_range`, I created a dataframe containing timeseries values for the entire year of 2025. The interval was set to 1 day, ensuring that every single date in the year is included. Below is the resulting timeseries dataframe. Then I extracted the month values from the dates to create a new column *Month*.\n\n::: {#12930e44 .cell execution_count=2}\n``` {.python .cell-code}\nfrom datetime import datetime\ndate_df = pl.DataFrame(\n    {\n        \"Date\": pl.datetime_range(\n            start=datetime(2025, 1, 1),\n            end=datetime(2025, 12, 31),\n            interval=\"1d\",\n            eager=True,\n        )\n    }\n).with_columns(pl.col('Date').dt.date(),\n               Month=pl.col('Date').dt.month())\ndate_df\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (365, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>Date</th><th>Month</th></tr><tr><td>date</td><td>i8</td></tr></thead><tbody><tr><td>2025-01-01</td><td>1</td></tr><tr><td>2025-01-02</td><td>1</td></tr><tr><td>2025-01-03</td><td>1</td></tr><tr><td>2025-01-04</td><td>1</td></tr><tr><td>2025-01-05</td><td>1</td></tr><tr><td>&hellip;</td><td>&hellip;</td></tr><tr><td>2025-12-27</td><td>12</td></tr><tr><td>2025-12-28</td><td>12</td></tr><tr><td>2025-12-29</td><td>12</td></tr><tr><td>2025-12-30</td><td>12</td></tr><tr><td>2025-12-31</td><td>12</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n## Joining the two dataframes\n\nBefore joining the two DataFrames, I converted the date values in the forecast dataset to month-only values. This ensured a unique common value between both dataframes, enabling the join to proceed. The dataframe below illustrates the transformation from date values to month-only values.\n\n::: {#1e61e211 .cell execution_count=3}\n``` {.python .cell-code}\ndf = (data\n .with_columns(pl.col('Date').dt.month())\n )\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (96, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>Date</th><th>Gadget</th><th>Forecast</th></tr><tr><td>i8</td><td>str</td><td>i16</td></tr></thead><tbody><tr><td>1</td><td>&quot;Headphones&quot;</td><td>3439</td></tr><tr><td>1</td><td>&quot;Keyboard&quot;</td><td>1652</td></tr><tr><td>1</td><td>&quot;Monitor&quot;</td><td>311</td></tr><tr><td>1</td><td>&quot;Mouse&quot;</td><td>1139</td></tr><tr><td>1</td><td>&quot;Printer&quot;</td><td>123</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>12</td><td>&quot;Mouse&quot;</td><td>1385</td></tr><tr><td>12</td><td>&quot;Printer&quot;</td><td>166</td></tr><tr><td>12</td><td>&quot;Smartwatch&quot;</td><td>678</td></tr><tr><td>12</td><td>&quot;Tablet&quot;</td><td>496</td></tr><tr><td>12</td><td>&quot;Webcam&quot;</td><td>512</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n<br>\n\nThe two dataframes were joined using a left join. Also, I decided to divide the forecast values by 4 since most months have at least 4 weeks Here's an example of the resulting dataframe for Headphones showing the monthly and weekly forecast.\n\n::: {#c72b1531 .cell execution_count=4}\n``` {.python .cell-code}\n(date_df\n .join(df, left_on='Month', right_on='Date', how='left')\n .drop('Month')\n .with_columns(Weekly_Forecast=pl.col('Forecast').truediv(4).round(0).cast(pl.Int16))\n .sort('Date')\n .filter(pl.col('Gadget') == \"Headphones\")\n )\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (365, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>Date</th><th>Gadget</th><th>Forecast</th><th>Weekly_Forecast</th></tr><tr><td>date</td><td>str</td><td>i16</td><td>i16</td></tr></thead><tbody><tr><td>2025-01-01</td><td>&quot;Headphones&quot;</td><td>3439</td><td>860</td></tr><tr><td>2025-01-02</td><td>&quot;Headphones&quot;</td><td>3439</td><td>860</td></tr><tr><td>2025-01-03</td><td>&quot;Headphones&quot;</td><td>3439</td><td>860</td></tr><tr><td>2025-01-04</td><td>&quot;Headphones&quot;</td><td>3439</td><td>860</td></tr><tr><td>2025-01-05</td><td>&quot;Headphones&quot;</td><td>3439</td><td>860</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>2025-12-27</td><td>&quot;Headphones&quot;</td><td>2992</td><td>748</td></tr><tr><td>2025-12-28</td><td>&quot;Headphones&quot;</td><td>2992</td><td>748</td></tr><tr><td>2025-12-29</td><td>&quot;Headphones&quot;</td><td>2992</td><td>748</td></tr><tr><td>2025-12-30</td><td>&quot;Headphones&quot;</td><td>2992</td><td>748</td></tr><tr><td>2025-12-31</td><td>&quot;Headphones&quot;</td><td>2992</td><td>748</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n## Converting to weekly buckets\n\nThe dates are still in days, but the client wants them in weeks so I used `groub_by_dynamic` with an interval of 7 days to convert them into weekly buckets. Below is the resulting dataframe.\n\n::: {#21d2d4e0 .cell execution_count=5}\n``` {.python .cell-code}\nfrom great_tables import loc, style\n\nprocessed_df = (date_df\n .join(df, left_on='Month', right_on='Date', how='left')\n .drop('Month')\n .with_columns(Weekly_Forecast=pl.col('Forecast').truediv(4).round(0).cast(pl.Int16))\n .sort('Date')\n .filter(pl.col('Gadget') == \"Headphones\")\n .group_by_dynamic('Date', every='7d')\n .agg(pl.first('Gadget', 'Forecast', 'Weekly_Forecast'))\n )\n\nprocessed_df[0:10].style.tab_style(\n    style.fill(\"yellow\"),\n    loc.body(\n        rows=pl.col(\"Date\").dt.year() == 2024,\n    ),\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div id=\"bvvogfhlwl\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>\n#bvvogfhlwl table {\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n          -webkit-font-smoothing: antialiased;\n          -moz-osx-font-smoothing: grayscale;\n        }\n\n#bvvogfhlwl thead, tbody, tfoot, tr, td, th { border-style: none; }\n tr { background-color: transparent; }\n#bvvogfhlwl p { margin: 0; padding: 0; }\n #bvvogfhlwl .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; }\n #bvvogfhlwl .gt_caption { padding-top: 4px; padding-bottom: 4px; }\n #bvvogfhlwl .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; }\n #bvvogfhlwl .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; }\n #bvvogfhlwl .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #bvvogfhlwl .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n #bvvogfhlwl .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #bvvogfhlwl .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; }\n #bvvogfhlwl .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; }\n #bvvogfhlwl .gt_column_spanner_outer:first-child { padding-left: 0; }\n #bvvogfhlwl .gt_column_spanner_outer:last-child { padding-right: 0; }\n #bvvogfhlwl .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; }\n #bvvogfhlwl .gt_spanner_row { border-bottom-style: hidden; }\n #bvvogfhlwl .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; }\n #bvvogfhlwl .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; }\n #bvvogfhlwl .gt_from_md> :first-child { margin-top: 0; }\n #bvvogfhlwl .gt_from_md> :last-child { margin-bottom: 0; }\n #bvvogfhlwl .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; }\n #bvvogfhlwl .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; }\n #bvvogfhlwl .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; }\n #bvvogfhlwl .gt_row_group_first td { border-top-width: 2px; }\n #bvvogfhlwl .gt_row_group_first th { border-top-width: 2px; }\n #bvvogfhlwl .gt_striped { background-color: rgba(128,128,128,0.05); }\n #bvvogfhlwl .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n #bvvogfhlwl .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; }\n #bvvogfhlwl .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; text-align: left; }\n #bvvogfhlwl .gt_left { text-align: left; }\n #bvvogfhlwl .gt_center { text-align: center; }\n #bvvogfhlwl .gt_right { text-align: right; font-variant-numeric: tabular-nums; }\n #bvvogfhlwl .gt_font_normal { font-weight: normal; }\n #bvvogfhlwl .gt_font_bold { font-weight: bold; }\n #bvvogfhlwl .gt_font_italic { font-style: italic; }\n #bvvogfhlwl .gt_super { font-size: 65%; }\n #bvvogfhlwl .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; }\n #bvvogfhlwl .gt_asterisk { font-size: 100%; vertical-align: 0; }\n \n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n<thead>\n\n<tr class=\"gt_col_headings\">\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Date\">Date</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Gadget\">Gadget</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Forecast\">Forecast</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Weekly_Forecast\">Weekly_Forecast</th>\n</tr>\n</thead>\n<tbody class=\"gt_table_body\">\n  <tr>\n    <td style=\"background-color: yellow;\" class=\"gt_row gt_right\">2024-12-26</td>\n    <td style=\"background-color: yellow;\" class=\"gt_row gt_left\">Headphones</td>\n    <td style=\"background-color: yellow;\" class=\"gt_row gt_right\">3439</td>\n    <td style=\"background-color: yellow;\" class=\"gt_row gt_right\">860</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_right\">2025-01-02</td>\n    <td class=\"gt_row gt_left\">Headphones</td>\n    <td class=\"gt_row gt_right\">3439</td>\n    <td class=\"gt_row gt_right\">860</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_right\">2025-01-09</td>\n    <td class=\"gt_row gt_left\">Headphones</td>\n    <td class=\"gt_row gt_right\">3439</td>\n    <td class=\"gt_row gt_right\">860</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_right\">2025-01-16</td>\n    <td class=\"gt_row gt_left\">Headphones</td>\n    <td class=\"gt_row gt_right\">3439</td>\n    <td class=\"gt_row gt_right\">860</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_right\">2025-01-23</td>\n    <td class=\"gt_row gt_left\">Headphones</td>\n    <td class=\"gt_row gt_right\">3439</td>\n    <td class=\"gt_row gt_right\">860</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_right\">2025-01-30</td>\n    <td class=\"gt_row gt_left\">Headphones</td>\n    <td class=\"gt_row gt_right\">3439</td>\n    <td class=\"gt_row gt_right\">860</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_right\">2025-02-06</td>\n    <td class=\"gt_row gt_left\">Headphones</td>\n    <td class=\"gt_row gt_right\">2620</td>\n    <td class=\"gt_row gt_right\">655</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_right\">2025-02-13</td>\n    <td class=\"gt_row gt_left\">Headphones</td>\n    <td class=\"gt_row gt_right\">2620</td>\n    <td class=\"gt_row gt_right\">655</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_right\">2025-02-20</td>\n    <td class=\"gt_row gt_left\">Headphones</td>\n    <td class=\"gt_row gt_right\">2620</td>\n    <td class=\"gt_row gt_right\">655</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_right\">2025-02-27</td>\n    <td class=\"gt_row gt_left\">Headphones</td>\n    <td class=\"gt_row gt_right\">2620</td>\n    <td class=\"gt_row gt_right\">655</td>\n  </tr>\n</tbody>\n\n\n</table>\n\n</div>\n        \n```\n:::\n:::\n\n\n<br>\n\nDo you notice the peculiarity that `group_by_dynamic` introduces? None of our original DataFrames contained the year 2024, yet after using `group_by_dynamic`, we now see 2024. What’s going on here? I was initially unaware of this behavior. It turns out that `group_by_dynamic` shifts date values by the interval specified in the `every` parameter. Since we used a 7-day interval, the date values were moved 7 days back, causing the appearance of 2024.\n\nBut wait—the client specifically needs forecast data for 2025. How can we address this? Thankfully, the developers of Polars anticipated this issue and provided a solution. As outlined in the documentation, adding the `start_by` parameter with the value `\"datapoint\"` to `group_by_dynamic` resolves the problem. With this adjustment, the year 2024 disappeared entirely.\n\n::: {#359a8a47 .cell execution_count=6}\n``` {.python .cell-code}\n(date_df\n .join(df, left_on='Month', right_on='Date', how='left')\n .drop('Month')\n .filter(pl.col('Gadget') == 'Monitor')\n .with_columns(Weekly_Forecast=pl.col('Forecast').truediv(4).round(0).cast(pl.Int16))\n .sort('Date')\n .group_by_dynamic('Date', every='7d', start_by='datapoint')\n .agg(pl.first('Gadget', 'Forecast', 'Weekly_Forecast'))\n )\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (53, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>Date</th><th>Gadget</th><th>Forecast</th><th>Weekly_Forecast</th></tr><tr><td>date</td><td>str</td><td>i16</td><td>i16</td></tr></thead><tbody><tr><td>2025-01-01</td><td>&quot;Monitor&quot;</td><td>311</td><td>78</td></tr><tr><td>2025-01-08</td><td>&quot;Monitor&quot;</td><td>311</td><td>78</td></tr><tr><td>2025-01-15</td><td>&quot;Monitor&quot;</td><td>311</td><td>78</td></tr><tr><td>2025-01-22</td><td>&quot;Monitor&quot;</td><td>311</td><td>78</td></tr><tr><td>2025-01-29</td><td>&quot;Monitor&quot;</td><td>311</td><td>78</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>2025-12-03</td><td>&quot;Monitor&quot;</td><td>325</td><td>81</td></tr><tr><td>2025-12-10</td><td>&quot;Monitor&quot;</td><td>325</td><td>81</td></tr><tr><td>2025-12-17</td><td>&quot;Monitor&quot;</td><td>325</td><td>81</td></tr><tr><td>2025-12-24</td><td>&quot;Monitor&quot;</td><td>325</td><td>81</td></tr><tr><td>2025-12-31</td><td>&quot;Monitor&quot;</td><td>325</td><td>81</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n<br>\n\nWith the date issue resolved, we can now proceed to develop the code needed to create the final dataset for presentation to the client.\n\n::: {#a334e1d3 .cell execution_count=7}\n``` {.python .cell-code}\ngadget_list = df['Gadget'].unique().to_list()\n\nbucket_dfs = []\nfor gadget in gadget_list:\n    bucket_df = (date_df\n        .join(df, left_on='Month', right_on='Date', how='left')\n        .drop('Month')\n        .filter(pl.col('Gadget') == gadget)\n        .with_columns(Weekly_Forecast=pl.col('Forecast').truediv(4).round(0).cast(pl.Int16))\n        .sort('Date')\n        .group_by_dynamic('Date', every='7d', start_by='datapoint')\n        .agg(pl.first('Gadget', 'Forecast', 'Weekly_Forecast'))\n        )\n    bucket_dfs.append(bucket_df)\n\nall_bucket_df = pl.concat(bucket_dfs).drop('Forecast')\nall_bucket_df\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (424, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>Date</th><th>Gadget</th><th>Weekly_Forecast</th></tr><tr><td>date</td><td>str</td><td>i16</td></tr></thead><tbody><tr><td>2025-01-01</td><td>&quot;Smartwatch&quot;</td><td>218</td></tr><tr><td>2025-01-08</td><td>&quot;Smartwatch&quot;</td><td>218</td></tr><tr><td>2025-01-15</td><td>&quot;Smartwatch&quot;</td><td>218</td></tr><tr><td>2025-01-22</td><td>&quot;Smartwatch&quot;</td><td>218</td></tr><tr><td>2025-01-29</td><td>&quot;Smartwatch&quot;</td><td>218</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>2025-12-03</td><td>&quot;Tablet&quot;</td><td>124</td></tr><tr><td>2025-12-10</td><td>&quot;Tablet&quot;</td><td>124</td></tr><tr><td>2025-12-17</td><td>&quot;Tablet&quot;</td><td>124</td></tr><tr><td>2025-12-24</td><td>&quot;Tablet&quot;</td><td>124</td></tr><tr><td>2025-12-31</td><td>&quot;Tablet&quot;</td><td>124</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n<br>\n\nThe lesson to remember is that `group_by_dynamic` will move the date values back by the specified interval you set in the `every` parameter. If you want to maintain the date values in your dataset, you must add ananother parameter `start_at` and set it to `\"datapoint\"`.\n\nReach out if you need help with your data problems. Also, take a look at our {{< var polars_course >}} to improve your data analysis skills using this fast Python library.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}