{
  "hash": "9a80d44525ae510e985858312e072040",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Using set theory to speed up your data analysis'\nauthor: '{{< var author >}}'\ndate: '2025-02-09'\ndate-format: iso\ntoc: true\ntoc-title: 'Sections'\ntoc-location: left\ntoc-depth: 3\nimage: image_1.png\n---\n\n\nMost data analysis tasks involve joining tables to get more data or filter out specific data. But what happens when the data you’re working with isn’t in a format that allows easy table joins? In such cases, you can turn to sets. That’s right—the same sets you learned about in grade school can be incredibly useful for analyzing data. By applying your knowledge on set theory, you can effectively handle and analyze complex datasets.\n\n## A refresher on sets\nIn case you’ve forgotten the fundamentals of set operations, allow me to bring you up to speed. First, let’s define what a set is:\n\n- A set is a collection of zero or more items. Or, if you want to be more technical, a set is a collection of zero or more object references that point to hashable objects.  \n- Sets are mutable, meaning you can add or remove items from them.  \n- Sets are unordered, meaning they have no index positions and cannot be sliced like lists.\n\n## Set operators\n**Intersection**  \nThe intersection operation is one of the most commonly used in sets. It identifies and retrieves the elements that are shared across all the sets being compared. In Python, the symbol `&` is used for intersection. Suppose you had the following two sets.\n\n::: {.gray-text .center-text}\n![sets of data analysts and engineers](image_2.png){fig-align=\"center\"}\n:::\n\n::: {#19c80525 .cell execution_count=1}\n``` {.python .cell-code}\ndata_engineers = set(['Jeremie', 'Joram', 'Ollie', 'Ashwin'])\ndata_analysts = set(['Joram', 'Ollie', 'Pallavi', 'Maura'])\n```\n:::\n\n\nHere's how you would find out the people who are both data analysts and data engineers.\n\n::: {#e63db7de .cell execution_count=2}\n``` {.python .cell-code}\ndata_engineers & data_analysts\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n{'Joram', 'Ollie'}\n```\n:::\n:::\n\n\nNow we see that Joram and Ollie are the superstars who can do both data analysis and data engineering.\n\n**Union**  \nThe union operation gathers all the elements from both sets, ensuring that each element appears only once in the resulting set. The `|` symbol represents this operation. Using the union operator will give me all the names of data analysts and engineers.\n\n::: {#1e945268 .cell execution_count=3}\n``` {.python .cell-code}\ndata_engineers | data_analysts\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n{'Ashwin', 'Jeremie', 'Joram', 'Maura', 'Ollie', 'Pallavi'}\n```\n:::\n:::\n\n\n**Difference**  \nThe difference operation identifies elements that exist in one set but not in the other. It is similar to subtraction in numbers. The symbol `-` represents this operation. The code below will give me names of people who are only data engineers.\n\n::: {#a076078c .cell execution_count=4}\n``` {.python .cell-code}\ndata_engineers - data_analysts\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n{'Ashwin', 'Jeremie'}\n```\n:::\n:::\n\n\n::: {.callout-note}\nSet difference produces different results when the order is reversed. So, `A - B` is not the same as `B - A`.\n:::\n\n::: {#cba969a3 .cell execution_count=5}\n``` {.python .cell-code}\ndata_analysts - data_engineers\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n{'Maura', 'Pallavi'}\n```\n:::\n:::\n\n\n**Symmetric difference**  \nThis operation retrieves every element in set A and every element in set B, but excludes elements that are present in both sets. In short, it's the subtraction of the intersection from the union set. The symbol `^` is used for set difference.\n\nHere's how I would get all the names of people who are only data analysts or data engineers. The superstars -- those who can do both won't be included.\n\n::: {#c9cf59cc .cell execution_count=6}\n``` {.python .cell-code}\ndata_analysts ^ data_engineers\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n{'Ashwin', 'Jeremie', 'Maura', 'Pallavi'}\n```\n:::\n:::\n\n\n**Addition**  \nThis adds or inserts an element into the set. Let me display the set that contains data analysts.\n\n::: {#3f2f94da .cell execution_count=7}\n``` {.python .cell-code}\ndata_analysts\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n{'Joram', 'Maura', 'Ollie', 'Pallavi'}\n```\n:::\n:::\n\n\nNow let me add the name \"David\" to that set.\n\n::: {#f6d4f856 .cell execution_count=8}\n``` {.python .cell-code}\ndata_analysts.add('David')\ndata_analysts\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n{'David', 'Joram', 'Maura', 'Ollie', 'Pallavi'}\n```\n:::\n:::\n\n\n## Analyze sales data\nNow that your memory is refreshed on sets, let's apply this knowledge to analyze real sales data. The sales data is stored in a CSV file, so I’ll use Python’s `csv` library to read it. To start, here’s how the data would look in Excel.\n\n::: {#681c9fbc .cell execution_count=9}\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (1_000, 8)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>Account Number</th><th>Account Name</th><th>sku</th><th>category</th><th>quantity</th><th>unit price</th><th>ext price</th><th>date</th></tr><tr><td>i64</td><td>str</td><td>str</td><td>str</td><td>i64</td><td>f64</td><td>f64</td><td>datetime[μs]</td></tr></thead><tbody><tr><td>803666</td><td>&quot;Fritsch-Glover&quot;</td><td>&quot;HX-24728&quot;</td><td>&quot;Hat&quot;</td><td>1</td><td>98.98</td><td>98.98</td><td>2014-09-28 11:56:02</td></tr><tr><td>64898</td><td>&quot;O&#x27;Conner Inc&quot;</td><td>&quot;LK-02338&quot;</td><td>&quot;Sweater&quot;</td><td>9</td><td>34.8</td><td>313.2</td><td>2014-04-24 16:51:22</td></tr><tr><td>423621</td><td>&quot;Beatty and Sons&quot;</td><td>&quot;ZC-07383&quot;</td><td>&quot;Sweater&quot;</td><td>12</td><td>60.24</td><td>722.88</td><td>2014-09-17 17:26:22</td></tr><tr><td>137865</td><td>&quot;Gleason, Bogisich and Franecki&quot;</td><td>&quot;QS-76400&quot;</td><td>&quot;Sweater&quot;</td><td>5</td><td>15.25</td><td>76.25</td><td>2014-01-30 07:34:02</td></tr><tr><td>435433</td><td>&quot;Morissette-Heathcote&quot;</td><td>&quot;RU-25060&quot;</td><td>&quot;Sweater&quot;</td><td>19</td><td>51.83</td><td>984.77</td><td>2014-08-24 06:18:12</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>29068</td><td>&quot;Brekke and Sons&quot;</td><td>&quot;FT-50146&quot;</td><td>&quot;Sweater&quot;</td><td>2</td><td>46.48</td><td>92.96</td><td>2014-08-10 16:20:32</td></tr><tr><td>77116</td><td>&quot;Lang-Wunsch&quot;</td><td>&quot;IC-59308&quot;</td><td>&quot;Socks&quot;</td><td>19</td><td>29.25</td><td>555.75</td><td>2013-11-20 13:32:45</td></tr><tr><td>23749</td><td>&quot;Bogisich and Sons&quot;</td><td>&quot;IC-59308&quot;</td><td>&quot;Socks&quot;</td><td>18</td><td>54.79</td><td>986.22</td><td>2014-03-10 08:11:59</td></tr><tr><td>172519</td><td>&quot;Kutch, Cormier and Harber&quot;</td><td>&quot;RU-25060&quot;</td><td>&quot;Sweater&quot;</td><td>15</td><td>62.53</td><td>937.95</td><td>2014-04-11 02:50:03</td></tr><tr><td>914594</td><td>&quot;Roberts, Volkman and Batz&quot;</td><td>&quot;LK-02338&quot;</td><td>&quot;Sweater&quot;</td><td>11</td><td>86.4</td><td>950.4</td><td>2014-02-14 20:10:42</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n<br>\n\n**The task**  \nThe table above contains 1,000 sales transactions. Your task is to generate a sales report for your boss that answers the following questions:\n\n- How many customers have bought socks?\n- How many customers have bought hats?\n- Who has bought socks but not hats?\n- Which customers have bought socks, hats and sweaters?\n\nOf course you can do this task in Excel by sorting and filtering your way to the report, but that's time-consuming. I want to show you an efficient way to create the report that you can run month, weekly, even daily without having to redo the work.\n\n**Creating the report**  \nFirst let's load the CSV file using the `csv` library.\n\n::: {#c5f06dc7 .cell execution_count=10}\n``` {.python .cell-code}\nimport csv\n\nsales_file = open(f\"{Path('../../')}/datasets/sample_sales.csv\", \"rt\")\nreader = csv.reader(sales_file)\n```\n:::\n\n\nNow let's create the empty sets for the three product categories contained the CSV file.\n\n::: {#acf16e8a .cell execution_count=11}\n``` {.python .cell-code}\nsocks = set()\nhats = set()\nsweaters = set()\n```\n:::\n\n\nFinally, let's creat the logic that will populate the sets we created with values.\n\n::: {#ca17ebb6 .cell execution_count=12}\n``` {.python .cell-code}\nfor row in reader:\n    customer = (row[0],row[1])\n    category = row[3]\n    if category == 'Socks':\n        socks.add(customer)\n    if category == 'Hat':\n        hats.add(customer)\n    if category == 'Sweater':\n        sweaters.add(customer)\n\nsales_file.close()\n```\n:::\n\n\nYou've loaded the data and applied the logic to populate the sets representing the product categories. You can now answer the questions that your boss wants answered in the report.\n\nHere's how you would find the number of customes who bought socks.\n\n::: {#218a74c4 .cell execution_count=13}\n``` {.python .cell-code}\nlen(socks)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n271\n```\n:::\n:::\n\n\nWhat about the number of customers who bough hats?\n\n::: {#787a721b .cell execution_count=14}\n``` {.python .cell-code}\nlen(hats)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n170\n```\n:::\n:::\n\n\nYou’re now confident that your code works, so it’s time to create the report. Below is a Venn diagram that highlights the key questions to address in the report.\n\n::: {.gray-text .center-text}\n![venn diagram of product category sales](image_1.png){fig-align=\"center\"}\n:::\n\nHere's the full Python code you can run to create the report for you boss. It includes the names of customers who bought all three products. These are the valued customers.\n\n::: {#b9e5e591 .cell execution_count=15}\n``` {.python .cell-code}\nimport csv\n\n# Using with open to automatically handle file closing\nwith open(f\"{Path('../../')}/datasets/sample_sales.csv\", \"rt\") as sales_file:\n    reader = csv.reader(sales_file)\n\n    # Initialize the sets\n    socks = set()\n    hats = set()\n    sweaters = set()\n\n    # Write the logic\n    for row in reader:\n        customer = (row[0], row[1])\n        category = row[3]\n        if category == 'Socks':\n            socks.add(customer)\n        if category == 'Hat':\n            hats.add(customer)\n        if category == 'Sweater':\n            sweaters.add(customer)\n\n# Print report results\nprint(\"SALES REPORT AS OF 2/2/25\\n\")\nprint(f'{len(socks)} customers bought socks.')\nprint(f'{len(socks - hats)} customers bought socks but not hats.')\nprint(f'{len(socks & hats)} customers bought socks and hats.')\nprint(f'{len(socks & sweaters)} customers bought socks and sweaters.')\nprint(f'{len(socks & hats & sweaters)} customers bought all three products.')\n\nprint(f'\\nOur {len(socks & hats & sweaters)} valued customers are:')\nfor customer in (socks & hats & sweaters):\n    print(f'  - {customer[1]}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSALES REPORT AS OF 2/2/25\n\n271 customers bought socks.\n240 customers bought socks but not hats.\n31 customers bought socks and hats.\n79 customers bought socks and sweaters.\n9 customers bought all three products.\n\nOur 9 valued customers are:\n  - Beier-Bosco\n  - Fritsch-Glover\n  - Kuvalis-Roberts\n  - Koepp-McLaughlin\n  - Mills Inc\n  - Halvorson PLC\n  - Bashirian, Beier and Watsica\n  - Ledner-Kling\n  - Upton, Runolfsson and O'Reilly\n```\n:::\n:::\n\n\nCheck out our {{< var polars_course >}} to upskill your data analysis skills.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}