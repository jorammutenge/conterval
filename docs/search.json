[
  {
    "objectID": "blog/how-to-create-economist-style-chart-with-plotly/index.html",
    "href": "blog/how-to-create-economist-style-chart-with-plotly/index.html",
    "title": "How to create an Economist-style chart with plotly",
    "section": "",
    "text": "When it comes to static visualizations you can use in print, no publication does a better job creating them than The Economist. Thatâ€™s because their charts are simple, yet they manage to convey the relevant message contained in the data.\nMany people focus on the chartâ€™s aestheticsâ€”how it looks to the human eye. In so doing, they neglect the message contained in the data, which they are supposed to convey to the audience.\nI have no idea what software the data visualization analysts at The Economist use to create their charts. Regardless, I thought I should try recreating one of the plots using my favorite plotting library, Plotly.\nHereâ€™s the original chart from The Economist.\n\n\n\n\nThe Economist chart\n\n\n\nSince I didnâ€™t have the data to recreate this chart, I put together some fake department data about a company from one of my favorite TV shows, Suits. Below is the dataframe containing the data.\n\nimport polars as pl\nimport plotly.graph_objects as go\n\ndata = {\n    \"Department\": [\"Production\", \"Finance\", \"Customer Service\", \"Operations\", \"IT\", \"Procurement\", \"Sales\", \"HR\"],\n    \"2023\": [20, 60, 80, 85, 45, 32, 60, 75],\n    \"2024\": [35, 70, 70, 78, 55, 55, 65, 80]\n}\n\ndf = pl.DataFrame(data).sort('Department', descending=False)\ndf\n\n\nshape: (8, 3)\n\n\n\nDepartment\n2023\n2024\n\n\nstr\ni64\ni64\n\n\n\n\n\"Customer Service\"\n80\n70\n\n\n\"Finance\"\n60\n70\n\n\n\"HR\"\n75\n80\n\n\n\"IT\"\n45\n55\n\n\n\"Operations\"\n85\n78\n\n\n\"Procurement\"\n32\n55\n\n\n\"Production\"\n20\n35\n\n\n\"Sales\"\n60\n65\n\n\n\n\n\n\n\nAnd now here is the chart designed using Plotly.\n\nBG_COLOR = '#E9EDF0'\nRED = '#E3120B'\nGREY = '#5e5c64'\n\nfig = go.Figure()\n\nfor i in range(df.shape[0]):\n    fig.add_trace(go.Scatter(\n        x=[df[\"2023\"][i], df[\"2024\"][i]],\n        y=[df[\"Department\"][i], df[\"Department\"][i]],\n        mode='lines+markers',\n        line=dict(color='#598080', width=4),  # Thicker line\n        marker=dict(size=16),  # Bigger dots\n        showlegend=False\n    ))\n    fig.add_trace(go.Scatter(\n        x=[df[\"2023\"][i]],\n        y=[df[\"Department\"][i]],\n        mode='markers',\n        marker=dict(color=GREY, size=16),  # Bigger dots\n        showlegend=False\n    ))\n    fig.add_trace(go.Scatter(\n        x=[df[\"2024\"][i]],\n        y=[df[\"Department\"][i]],\n        mode='markers',\n        marker=dict(color=RED, size=16),  # Bigger dots\n        showlegend=False\n    ))\n\n# Update layout to customize appearance\nfig.update_layout(\n    title=\"&lt;b&gt;Engagement score declined in&lt;br&gt;customer service & operations\",\n    title_font=dict(size=26),\n    title_y=.9,\n    plot_bgcolor=BG_COLOR,\n    paper_bgcolor=BG_COLOR,\n    height=600,\n    margin=dict(t=180, b=80),\n    xaxis=dict(\n        side=\"top\",  # Move x-axis to the top\n        tickfont=dict(size=18, family=\"Inter\")  # Increase the font size of the x-axis ticks\n    ),\n    yaxis=dict(\n        tickfont=dict(size=16, family=\"Inter\")\n    ),\n    shapes=[\n        dict(\n            type=\"line\",\n            xref=\"paper\",\n            yref=\"paper\",\n            x0=-0.14, y0=1.5,  \n            x1=0.022, y1=1.5,  \n            line=dict(\n                color=RED,  \n                width=10  \n            )\n        )],\n    font=dict(family=\"Inter\")  # Set the global font to \"Inter\"\n)\n\nfig.add_annotation(\n    dict(\n        text=\"&lt;b&gt;2023\",\n        x=0.1,  # x position (0 means far left)\n        y=0.72,  # y position (adjust as necessary)\n        xref=\"paper\",\n        yref=\"paper\",\n        showarrow=False,  # No arrow\n        font=dict(\n            family=\"Inter\",  # Font family\n            size=22,  # Font size\n            color=GREY  # Font color\n        ),\n        align=\"left\"\n    ),\n)\n\nfig.add_annotation(\n    dict(\n        text=\"&lt;b&gt;2024\",\n        x=0.6,  # x position (0 means far left)\n        y=0.72,  # y position (adjust as necessary)\n        xref=\"paper\",\n        yref=\"paper\",\n        showarrow=False,  # No arrow\n        font=dict(\n            family=\"Inter\",  # Font family\n            size=22,  # Font size\n            color=RED  # Font color\n        ),\n        align=\"left\"\n    ),\n)\n\nfig.add_layout_image(\n    dict(\n        source=f\"data:image/png;base64,{encoded_image}\",\n        xref=\"paper\",\n        yref=\"paper\",\n        x=.94,\n        y=-0.18,\n        xanchor=\"right\",\n        yanchor=\"bottom\",\n        sizex=0.22,\n        sizey=0.22,\n        layer=\"above\"\n    )\n)\n\nfig.add_annotation(\n    dict(\n        text=\"Source: Pearson Specter Litt\",\n        x=-0.14,  # x position (0 means far left)\n        y=-0.175,  # y position (adjust as necessary)\n        xref=\"paper\",\n        yref=\"paper\",\n        showarrow=False,  # No arrow\n        font=dict(\n            family=\"Inter\",  # Font family\n            size=14,  # Font size\n            color=GREY  # Font color\n        ),\n        align=\"left\"\n    ),\n)\n\nfig.show()\n\n                                                \n\n\n\nForget about the differences in the data used in my chart and that by The Economist and pay attention to the style. Youâ€™ll notice that they have the same style. This just shows how customizable Plotly is as a graphing library. You can customize any chat to your heartâ€™s content.\n\nNow you know that plotly is versatile. You can customize your plots to your heartâ€™s contents!"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Conterval",
    "section": "",
    "text": "How to create an Economist-style chart with plotly\n\n\n\n\n\n\n\n\n\n\n\n2024-11-13\n\n\nJoram Mutenge\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Conterval",
    "section": "",
    "text": "Consulting and training in data science, data engineering, visualization and analytical computing solutions\n\n\n\n\n\nOur Services\n\n\n\nData analysis with NumPy, Pandas, Polars, SQL\n\n\nExtract Load Transform (ETL) with Apache Airflow, Talend, AWS Glue\n\n\nData visualization with Tableau, Power BI, Plotly, Matplotlib, Seaborn, D3, Excel\n\n\nData cleaning with OpenRefine, Tableau Prep, Pandas, Polars\n\n\nPredictive modeling with Scikit-learn, Scipy, XGBoost, CatBoost, Excel\n\n\n\n\n\n\nContact Us\n\n\nðŸ“§ contact@conterval.com"
  }
]